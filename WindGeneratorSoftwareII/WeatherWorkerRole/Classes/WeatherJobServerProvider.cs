///////////////////////////////////////////////////////////
//  WeatherJobServerProvider.cs
//  Implementation of the Class WeatherJobServerProvider
//  Generated by Enterprise Architect
//  Created on:      16-maj-2018 10.31.24
//  Original author: Stefan
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using WeatherCommon.Classes;
using System.Diagnostics;
using WeatherWorkerRoleData.Classes;

namespace WeatherWorkerRole.Classes
{
    public class WeatherJobServerProvider : IWeather
    {
        WindGeneratorRepository windGeneratorRepository = new WindGeneratorRepository();
        WeatherRepository weatherRepository = new WeatherRepository();
        AggregateRepository aggregateRepository = new AggregateRepository();
        WindMillRepository windMillRepository = new WindMillRepository();

        public WeatherJobServerProvider()
        {

        }
        public void SendWeatherState(Weather weather)
        {
            if (weatherRepository.GetAllWeathers().Count != 0)
            {
                if (!weatherRepository.GetOneWeather(weather.City).WindSpeed.Equals(weather.WindSpeed))
                    weatherRepository.AddOrReplaceWeather(new WeatherBase(weather));
            }
            else
            {
                weatherRepository.AddWeather(new WeatherBase(weather));
            }
        }

        public WindGenerator GetWindGenerator()
        {
            return GetWindGeneratorFromDataBase();
        }

        private WindGenerator GetWindGeneratorFromDataBase()
        {
            WeatherBase weatherBase = null;
            WindGeneratorBase windGeneratorBase = windGeneratorRepository.GetOneWindGenerator("Novi Sad");

            WindMillBase windMillBase = windMillRepository.GetOneWindMill(windGeneratorBase.WindMill);
            AggregateBase aggregateBase = aggregateRepository.GetOneAggregate(windGeneratorBase.Aggregate);
            weatherBase = weatherRepository.GetLastWeather(windGeneratorBase.Weather);
            

            if (windGeneratorBase.Power < windMillBase.MinPower)
            {
                windGeneratorBase.AggregateONCnt++;
                aggregateBase.State = true;
                windGeneratorRepository.AddOrReplaceWindGenerator(windGeneratorBase);
                aggregateRepository.AddOrReplaceAggregate(aggregateBase);
            }
            else
            {
                aggregateBase.State = false;
            }
            
            Aggregate aggregate = new Aggregate(int.Parse(aggregateBase.RowKey), aggregateBase.CostPerKw, aggregateBase.Power, aggregateBase.State);
            WindMill windMill = new WindMill(windMillBase.Coefficient, windMillBase.MinPower, windMillBase.TurbineDiameter, windMillBase.MaxSpeed, windMillBase.MaxSpeedTime);

            if (weatherBase == null)
                weatherBase = weatherRepository.GetOneWeather(windGeneratorBase.Weather);

            Weather weather = new Weather(weatherBase.City, weatherBase.Description, weatherBase.MaxTemp, weatherBase.MinTemp, weatherBase.Pressure, weatherBase.WindSpeed);
            
            return new WindGenerator(weather, windMill, windGeneratorBase.WindMillCnt, aggregate,windGeneratorBase.AggregateONCnt);
        }

    }//end WeatherJobServerProvider

}//end namespace WeatherWorkerRole