///////////////////////////////////////////////////////////
//  WeatherStateCollector.cs
//  Implementation of the Class WeatherStateCollector
//  Generated by Enterprise Architect
//  Created on:      16-maj-2018 10.32.21
//  Original author: Stefan
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using WeatherCommon.Classes;
using WeatherWorkerRoleData.Classes;
using System.Net;
using System.ServiceModel;

namespace WeatherCollector.Classes
{
    public class WeatherStateCollector
    {

        private IWeather proxy;
        private Dictionary<string, Weather> weatherStates;
        private static List<string> URLs = new List<string>()
        {
            "http://api.openweathermap.org/data/2.5/weather?q=Novi%20Sad&appid=fdcdcf4845c441392a458b8dce7007c2", //Novi Sad
            "http://api.openweathermap.org/data/2.5/weather?q=Subotica&appid=fdcdcf4845c441392a458b8dce7007c2", //Subotica
            "http://api.openweathermap.org/data/2.5/weather?q=Sombor&appid=fdcdcf4845c441392a458b8dce7007c2", //Sombor
            "http://api.openweathermap.org/data/2.5/weather?q=Kikinda&appid=fdcdcf4845c441392a458b8dce7007c2", //Kikinda
            "http://api.openweathermap.org/data/2.5/weather?q=Zrenjanin&appid=fdcdcf4845c441392a458b8dce7007c2", //Zrenjanin
            "http://api.openweathermap.org/data/2.5/weather?q=Vrsac&appid=fdcdcf4845c441392a458b8dce7007c2", //Vrsac
            "http://api.openweathermap.org/data/2.5/weather?q=Sremska%20Mitrovica&appid=fdcdcf4845c441392a458b8dce7007c2", //Sremska Mitrovica
            "http://api.openweathermap.org/data/2.5/weather?q=Pancevo&appid=fdcdcf4845c441392a458b8dce7007c2", //Pancevo
            


        };

        public WeatherStateCollector()
        {
            weatherStates = new Dictionary<string, Weather>();
        }

        public void ConnectToServicehost()
        {
            //ChannelFactory<IWeather> factory = new ChannelFactory<IWeather>(new NetTcpBinding(), new EndpointAddress("net.tcp://127.255.0.2:502/InputRequest")); // promeniti na svakom kompu
            ChannelFactory<IWeather> factory = new ChannelFactory<IWeather>(new NetTcpBinding(), new EndpointAddress("net.tcp://localhost:502/InputRequest"));
            proxy = factory.CreateChannel();
        }

        public void GetStatesFromWeb()
        {
            ConnectToServicehost();
            foreach (string s in URLs)
                GetState(s);

            SendStatesToWorkerRole();
            proxy = null;
        }

        public void GetState(string city)
        {
            string json;
            using (WebClient client = new WebClient())
            {
                json = client.DownloadString(city);
            }

            string[] parts = json.Split(',');
            Weather w = new Weather();

            foreach (string item in parts)
            {
                string[] p = item.Split(':');

                switch (p[0])
                {
                    case @"""name""": w.City = p[1].Replace('"', ' ').Trim(); break;
                    case @"""description""": w.Description = p[1].Replace('"', ' ').Trim(); break;
                    case @"""pressure""": w.Pressure = int.Parse(p[1].Replace('"', ' ').Trim()); break;
                    case @"""wind""": w.WindSpeed = double.Parse(p[2].Replace('"', ' ').Replace('}', ' ').Trim()) + new Random().NextDouble(); break;
                    case @"""temp_min""": w.MinTemp = Double.Parse(p[1].Replace('}', ' ').Trim()) - 273.15; break;
                    case @"""temp_max""": w.MaxTemp = Double.Parse(p[1].Replace('}', ' ').Trim()) - 273.15; break;
                    default:
                        break;
                }
            }
            if (!weatherStates.ContainsKey(w.City))
                weatherStates.Add(w.City, w);
            else
                weatherStates[w.City] = w;
        }

        public void SendStatesToWorkerRole()
        {
            foreach (Weather item in weatherStates.Values)
            {
                proxy.SendWeatherState(item);
            }
        }

    }//end WeatherStateCollector

}//end namespace WeatherCollector