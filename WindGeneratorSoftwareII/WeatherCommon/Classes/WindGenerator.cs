///////////////////////////////////////////////////////////
//  WindGenerator.cs
//  Implementation of the Class WindGenerator
//  Generated by Enterprise Architect
//  Created on:      16-maj-2018 10.33.05
//  Original author: Stefan
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.Runtime.Serialization;

namespace WeatherCommon.Classes
{
    [DataContract]
    public class WindGenerator
    {

        private Weather weather;
        private WindMill windMill;
        private int windMillCnt;
        private Aggregate aggregate;
        private double aggregatePower;
        private double power;
        private int aggregateONCnt = 0;

        [DataMember]
        public Weather Weather { get => weather; set => weather = value; }
        [DataMember]
        public WindMill WindMill { get => windMill; set => windMill = value; }
        [DataMember]
        public Aggregate Aggregate { get => aggregate; set => aggregate = value; }
        [DataMember]
        public double Power { get => CalculatePower(); set => power = value; }
        [DataMember]
        public int WindMillCnt { get => windMillCnt; set => windMillCnt = value; }
        [DataMember]
        public double AggregatePower { get => aggregatePower; set => aggregatePower = value; }
        [DataMember]
        public int AggregateONCnt { get => aggregateONCnt; set => aggregateONCnt = value; }

        public WindGenerator()
        {

        }

        public WindGenerator(Weather weather, WindMill windMill, int windMillCnt, Aggregate aggregate,int aggregateONCnt)
        {
            if(weather == null || windMill == null || aggregate == null)
            {
                throw new ArgumentNullException("Arguments can't be null.");
            }

            if(windMillCnt <= 0)
            {
                throw new ArgumentException("Argument windMillCnt must be greater than 0.");
            }

            this.weather = weather;
            this.aggregatePower = aggregate.Power * windMillCnt;
            this.windMill = windMill;
            this.windMillCnt = windMillCnt;
            this.aggregate = aggregate;
            this.power = CalculatePower()*windMillCnt;
            this.aggregateONCnt = aggregateONCnt;
        }

        public double CalculatePower()
        {
            // validacija vrednosti polja koja ucestvuju u proracunu snage
            if(Weather.WindSpeed < 0 || Weather.WindSpeed > 80 || WindMill.MaxSpeed < 0 || WindMill.MaxSpeed > 80)
            {
                throw new ArgumentOutOfRangeException("Wind speed must be in range [0, 80] m/s.");
            }

            if(WindMill.WorkingTime < 0 || WindMill.MaxSpeedTime < 0)
            {
                throw new ArgumentOutOfRangeException("Woking time of turbine must be non-negative number.");
            }

            if(WindMill.Coefficient < 0.25 || WindMill.Coefficient > 0.45)
            {
                throw new ArgumentOutOfRangeException("Coefficient must be in range [0.25, 0.45].");
            }

            if(Weather.AirDensity != 1.29)
            {
                throw new ArgumentException("Air density must be 1.29.");
            }

            if(WindMill.TurbineDiameter <= 0)
            {
                throw new ArgumentException("Turbine diameter must be greater than 0.");
            }

            if(aggregateONCnt < 0)
            {
                throw new ArgumentException("Aggregate on time must be greater than 0.");
            }

            // proracun snage
            double power = 0;

            if (Weather.WindSpeed >= WindMill.MaxSpeed && WindMill.WorkingTime >= WindMill.MaxSpeedTime)
            {
                power = 0;

            }
            else if (Weather.WindSpeed >= WindMill.MaxSpeed && WindMill.WorkingTime < WindMill.MaxSpeedTime)
            {
                power = 0.5 * WindMill.Coefficient * Weather.AirDensity * CalculateSurfaceArea() * Math.Pow(Weather.WindSpeed, 3);
                WindMill.WorkingTime++;
            }
            else
            {
                power = 0.5 * WindMill.Coefficient * Weather.AirDensity * CalculateSurfaceArea() * Math.Pow(Weather.WindSpeed, 3);
                WindMill.WorkingTime = 0;
            }

            if (WindMill.WorkingTime == WindMill.MaxSpeedTime + (WindMill.MaxSpeedTime / 2)) // cooling period
            {
                WindMill.WorkingTime = 0;
            }

            return power * windMillCnt;
        }

        public double CalculateSurfaceArea()
        {
            if(WindMill.TurbineDiameter <= 0)
            {
                throw new ArgumentOutOfRangeException("Turbine diameter must be greater than 0.");
            }

            return Math.Pow((WindMill.TurbineDiameter / 2), 2) * Math.PI;
        }
    }//end WindGenerator

}//end namespace WeatherCommon