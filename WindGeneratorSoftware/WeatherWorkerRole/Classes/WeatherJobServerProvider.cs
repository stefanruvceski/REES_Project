///////////////////////////////////////////////////////////
//  WeatherJobServerProvider.cs
//  Implementation of the Class WeatherJobServerProvider
//  Generated by Enterprise Architect
//  Created on:      16-maj-2018 10.31.24
//  Original author: Stefan
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using WeatherCommon.Classes;
using System.Diagnostics;
using WeatherWorkerRoleData.Classes;

namespace WeatherWorkerRole.Classes
{
	public class WeatherJobServerProvider : IWeather
    {
        WindGeneratorRepository windGeneratorRepository = new WindGeneratorRepository();
        WeatherRepository weatherRepository = new WeatherRepository();

        private static Dictionary<string, WindGenerator> WindGenerators = new Dictionary<string, WindGenerator>()
        {
            {"Novi Sad", new WindGenerator(new Weather(),new WindMill(),10,new Aggregate()) }
        };

    public WeatherJobServerProvider(){

		}

		~WeatherJobServerProvider(){

		}

        public void SendWeatherState(Weather weather)
        {
            if (weatherRepository.GetAllWeathers().Count != 0)
            {
                if (!weatherRepository.GetOneWeather(weather.City).WindSpeed.Equals(weather.WindSpeed))
                    weatherRepository.AddOrReplaceWeather(new WeatherBase(weather));
            }
            else
            {
                weatherRepository.AddWeather(new WeatherBase(weather));
            }
        }

        public WindGenerator GetWeather() // ne treba da vraca weather nego windgenerator
        {
            WindGenerator retVal = null;

            foreach(WindGenerator item in WindGenerators.Values)
            {
                retVal = item;
                break;
            }

            return retVal;
        }

    }//end WeatherJobServerProvider

}//end namespace WeatherWorkerRole