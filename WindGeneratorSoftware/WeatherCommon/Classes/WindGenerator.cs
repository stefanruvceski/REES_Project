///////////////////////////////////////////////////////////
//  WindGenerator.cs
//  Implementation of the Class WindGenerator
//  Generated by Enterprise Architect
//  Created on:      16-maj-2018 10.33.05
//  Original author: Stefan
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.Runtime.Serialization;

namespace WeatherCommon.Classes
{
    [DataContract]
    public class WindGenerator
    {
        
        private Weather weather;
        private WindMill windMill;
        private int windMillCnt;
        private Aggregate aggregate;
        private double power;

        [DataMember]
        public Weather Weather { get => weather; set => weather = value; }
        [DataMember]
        public WindMill WindMill { get => windMill; set => windMill = value; }
        [DataMember]
        public Aggregate Aggregate { get => aggregate; set => aggregate = value; }
        [DataMember]
        public double Power { get => CalculatePower(); set => power = value; }
        [DataMember]
        public int WindMillCnt { get => windMillCnt; set => windMillCnt = value; }

        public WindGenerator()
        {

        }

        public WindGenerator(Weather weather, WindMill windMill, int windMillCnt, Aggregate aggregate)
        {
            this.weather = weather;
            this.windMill = windMill;
            this.windMillCnt = windMillCnt;
            this.aggregate = aggregate;
            this.power = CalculatePower();
        }

        private double CalculatePower()
        {
            double power = 0;

            if (Weather.WindSpeed >= WindMill.MaxSpeed && WindMill.WorkingTime >= WindMill.MaxSpeedTime)
            {
                power = 0;

            }
            else if (Weather.WindSpeed >= WindMill.MaxSpeed && WindMill.WorkingTime < WindMill.MaxSpeedTime)
            {
                power = 0.5 * WindMill.Coefficient * Weather.AirDensity * CalculateSurfaceArea() * Math.Pow(Weather.WindSpeed, 3);
                WindMill.WorkingTime++;
            }
            else
            {
                power = 0.5 * WindMill.Coefficient * Weather.AirDensity * CalculateSurfaceArea() * Math.Pow(Weather.WindSpeed, 3);
                WindMill.WorkingTime = 0;
            }

            if (WindMill.WorkingTime == WindMill.MaxSpeedTime + (WindMill.MaxSpeedTime / 2)) // cooling period
            {
                WindMill.WorkingTime = 0;
            }
            return power;
        }

        private double CalculateSurfaceArea()
        {
            return Math.Pow((WindMill.TurbineDiameter / 2), 2) * Math.PI;
        }
    }//end WindGenerator

}//end namespace WeatherCommon