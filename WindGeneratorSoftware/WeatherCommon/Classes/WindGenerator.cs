///////////////////////////////////////////////////////////
//  WindGenerator.cs
//  Implementation of the Class WindGenerator
//  Generated by Enterprise Architect
//  Created on:      16-maj-2018 10.33.05
//  Original author: Stefan
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.Runtime.Serialization;

namespace WeatherCommon.Classes
{
    [DataContract]
    public class WindGenerator
    {
        private double coefficient;
        private double minPower;
        private double turbineDiameter;
        private Weather weather;
        private double maxSpeed;
        private int maxSpeedTime;
        private Aggregate aggregate;
        private double power;
        private int windMillCnt;
        private int workingTime = 0;

        [DataMember]
        public double Coefficient { get => coefficient; set => coefficient = value; }
        [DataMember]
        public double MinPower { get => minPower; set => minPower = value; }
        [DataMember]
        public double TurbineDiameter { get => turbineDiameter; set => turbineDiameter = value; }
        [DataMember]
        public Weather Weather { get => weather; set => weather = value; }
        [DataMember]
        public double MaxSpeed { get => maxSpeed; set => maxSpeed = value; }
        [DataMember]
        public int MaxSpeedTime { get => maxSpeedTime; set => maxSpeedTime = value; }
        [DataMember]
        public Aggregate Aggregate { get => aggregate; set => aggregate = value; }
        [DataMember]
        public double Power { get => CalculatePower(); set => power = value; }
        [DataMember]
        public int WorkingTime { get => workingTime; set => workingTime = value; }
        [DataMember]
        public int WindMillCnt { get => windMillCnt; set => windMillCnt = value; }

        public WindGenerator()
        {

        }



        public WindGenerator(double coefficient, double minPower, double turbineDiameter, Weather weather, double maxSpeed, int maxSpeedTime, int windmillcnt, Aggregate aggregate)
        {

            this.coefficient = coefficient;
            this.minPower = minPower;
            this.turbineDiameter = turbineDiameter;
            this.weather = weather;
            this.maxSpeed = maxSpeed;
            this.maxSpeedTime = maxSpeedTime;
            this.WindMillCnt = windmillcnt;
            this.aggregate = aggregate;
            this.power = CalculatePower();
        }

        public double CalculateSurfaceArea()
        {
            return Math.Pow((TurbineDiameter / 2), 2) * Math.PI;
        }

        /// <summary>
        /// Metoda se poziva u okviru nekog while-a, pa ce ovo WorkingTime++ imati nekog smisla
        /// </summary>
        /// <returns></returns>
        private double CalculatePower()
        {
            double power = 0;

            if (Weather.WindSpeed >= MaxSpeed && WorkingTime >= MaxSpeedTime)
            {
                power = 0;

            }
            else if (Weather.WindSpeed >= MaxSpeed && WorkingTime < MaxSpeedTime)
            {
                power = 0.5 * Coefficient * Weather.AirDensity * CalculateSurfaceArea() * Math.Pow(Weather.WindSpeed, 3);
                WorkingTime++;
            }
            else
            {
                power = 0.5 * Coefficient * Weather.AirDensity * CalculateSurfaceArea() * Math.Pow(Weather.WindSpeed, 3);
                WorkingTime = 0;
            }

            if (WorkingTime == MaxSpeedTime + (MaxSpeedTime / 2)) // cooling period
            {
                WorkingTime = 0;
            }
            return power;
        }
    }//end WindGenerator

}//end namespace WeatherCommon